name: 'K8s Infrastructure - Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type DESTROY to confirm infrastructure destruction'
        required: true
        type: string
      cleanup_order:
        description: 'Select destruction order'
        required: true
        type: choice
        options:
          - 'k8s-first'
          - 'force-destroy'
        default: 'k8s-first'

env:
  TF_VERSION: '1.5.0'

jobs:
  validate-input:
    name: 'Validate Destroy Request'
    runs-on: ubuntu-latest
    outputs:
      should_destroy: ${{ steps.check.outputs.should_destroy }}
    steps:
    - name: Validate confirmation
      id: check
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" = "DESTROY" ]; then
          echo "should_destroy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Destruction confirmed"
        else
          echo "should_destroy=false" >> $GITHUB_OUTPUT
          echo "‚ùå Invalid confirmation. Type exactly: DESTROY"
          exit 1
        fi

  cleanup-kubernetes:
    name: 'Cleanup Kubernetes Resources'
    runs-on: ubuntu-latest
    needs: validate-input
    if: needs.validate-input.outputs.should_destroy == 'true' && github.event.inputs.cleanup_order == 'k8s-first'
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-east-1 --name fast-food-cluster-prd || echo "‚ö†Ô∏è Cluster may not exist"

    - name: Delete Kubernetes resources
      run: |
        echo "üóëÔ∏è Deleting Kubernetes applications..."
        cd k8s
        kubectl delete -f . --ignore-not-found=true || echo "‚ö†Ô∏è Some resources may not exist"
        
        echo "‚è≥ Waiting for LoadBalancer cleanup..."
        sleep 30

    - name: Verify cleanup
      run: |
        echo "üìã Remaining resources:"
        kubectl get all --all-namespaces || echo "‚úÖ Cluster cleaned or not accessible"

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: [validate-input, cleanup-kubernetes]
    if: always() && needs.validate-input.outputs.should_destroy == 'true'
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan Destroy
      run: terraform plan -destroy -input=false

    - name: Terraform Destroy
      run: |
        echo "üö® DESTROYING K8s INFRASTRUCTURE..."
        terraform destroy -auto-approve -input=false

    - name: Verify Destruction
      run: |
        echo "‚úÖ K8s infrastructure destroyed successfully!"
        echo "üìã Remaining state:"
        terraform show || echo "‚úÖ No resources remaining"

    - name: Notify Success
      if: success()
      run: |
        echo "üéâ K8s Infrastructure destroyed successfully!"
        echo "üí∞ AWS costs should stop accruing for:"
        echo "  - EKS Cluster control plane (~$73/month)"
        echo "  - EC2 worker nodes (~$15-30/month)"
        echo "  - LoadBalancer resources (~$18/month)"

    - name: Trigger DB Cleanup Notification
      if: success()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
        script: |
          github.rest.repos.createDispatchEvent({
            owner: 'laahundskarl',
            repo: 'fast-food-db-infra',
            event_type: 'k8s-destroyed',
            client_payload: {
              message: 'K8s infrastructure destroyed - DB can be safely destroyed now',
              trigger_source: 'k8s-destroy'
            }
          })